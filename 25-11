import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;

public class HorizontalBTView extends Pane {
    private BST<Integer> tree;
    private double boxSize = 40;

    public HorizontalBTView(BST<Integer> tree) {
        this.tree = tree;
        setPadding(new Insets(10));
        displayTree();
    }

    public void setStatus(String msg) {
        getChildren().add(new Text(20, 20, msg));
    }

    public void displayTree() {
        getChildren().clear();
        if (tree.getRoot() != null) {
            displayTree(tree.getRoot(), 50, getHeight() / 2, boxSize);
        }
    }

    private void displayTree(BST.TreeNode<Integer> root, double x, double y, double boxSize) {
        if (root.left != null) {
            // Draw line to left node
            getChildren().add(new Line(x + boxSize, y + boxSize / 2, x + boxSize + boxSize * 1.5, y - boxSize * 1.5 + boxSize / 2));
            displayTree(root.left, x + boxSize * 1.5, y - boxSize * 1.5, boxSize);
        }

        if (root.right != null) {
            // Draw line to right node
            getChildren().add(new Line(x + boxSize, y + boxSize / 2, x + boxSize + boxSize * 1.5, y + boxSize * 1.5 + boxSize / 2));
            displayTree(root.right, x + boxSize * 1.5, y + boxSize * 1.5, boxSize);
        }

        // Create a box for the root node
        VBox box = new VBox();
        box.setAlignment(Pos.CENTER);
        box.setLayoutX(x);
        box.setLayoutY(y);
        box.getChildren().add(new Rectangle(boxSize, boxSize, Color.WHITE));
        box.getChildren().add(new Text(root.element.toString()));
        getChildren().add(box);
    }
}
